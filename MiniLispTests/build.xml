<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build" name="MiniLispTests">
    <property environment="env"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="MiniLisp.location" value="../MiniLisp"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
    <path id="MiniLisp.classpath">
        <pathelement location="${MiniLisp.location}/bin"/>
        <pathelement location="${MiniLisp.location}/lib/commons-lang3-3.1.jar"/>
    </path>
    <path id="MiniLispTests.classpath">
        <pathelement location="bin"/>
        <pathelement location="lib/junit-4.10.jar"/>
        <path refid="MiniLisp.classpath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall">
        <ant antfile="build.xml" dir="${MiniLisp.location}" inheritAll="false" target="clean"/>
    </target>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects">
        <ant antfile="build.xml" dir="${MiniLisp.location}" inheritAll="false" target="build-project"/>
    </target>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="MiniLispTests.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target name="MiniLispTests">
        <mkdir dir="${junit.output.dir}"/>
        <junit failureProperty="test.failure">
          <classpath refid="MiniLispTests.classpath"/>
          <formatter type="brief" usefile="false"/>
          <batchtest>
            <fileset dir="bin">
              <include name="**/*Test.class" />
              <include name="**/*Tests.class" />
            </fileset>
          </batchtest>
        </junit>
        <fail message="test failed" if="test.failure" />
    </target>
    <target name="in.tdrhq.lisp">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="in.tdrhq.lisp.EvaluatorIntegrationTest" todir="${junit.output.dir}"/>
            <test name="in.tdrhq.lisp.EvaluatorTest" todir="${junit.output.dir}"/>
            <test name="in.tdrhq.lisp.LexerTest" todir="${junit.output.dir}"/>
            <test name="in.tdrhq.lisp.ParserTest" todir="${junit.output.dir}"/>
            <test name="in.tdrhq.lisp.PreludeTest" todir="${junit.output.dir}"/>
            <test name="in.tdrhq.lisp.SymbolMapTest" todir="${junit.output.dir}"/>
            <classpath refid="MiniLispTests.classpath"/>
        </junit>
    </target>
    <target name="EvaluatorIntegrationTest.testMacroFunccal">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="in.tdrhq.lisp.EvaluatorIntegrationTest" todir="${junit.output.dir}"/>
            <classpath refid="MiniLispTests.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
